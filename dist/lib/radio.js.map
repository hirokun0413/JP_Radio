{"version":3,"file":"radio.js","sourceRoot":"","sources":["../../src/lib/radio.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Application, Request, Response } from 'express';\r\nimport cron from 'node-cron';\r\nimport IcyMetadata from 'icy-metadata';\r\nimport { capitalize } from 'lodash';\r\nimport RdkProg from './prog';\r\nimport Radiko from './radiko';\r\n\r\nexport default class JpRadio {\r\n  private readonly app: Application;\r\n  private server: ReturnType<Application['listen']> | null = null;\r\n  private readonly task: ReturnType<typeof cron.schedule>;\r\n  private readonly port: number;\r\n  private readonly logger: Console;\r\n  private readonly acct: any;\r\n  private readonly commandRouter: any;\r\n  private prg: RdkProg | null = null;\r\n  private rdk: Radiko | null = null;\r\n\r\n  constructor(port = 9000, logger: Console, acct: any = null, commandRouter: any) {\r\n    this.app = express();\r\n    this.port = port;\r\n    this.logger = logger;\r\n    this.acct = acct;\r\n    this.commandRouter = commandRouter;\r\n\r\n    this.task = cron.schedule('0 3,9,15 * * *', this.#pgupdate.bind(this), {\r\n      scheduled: false\r\n    });\r\n\r\n    this.#setupRoutes();\r\n  }\r\n\r\n  #setupRoutes(): void {\r\n    this.app.get('/radiko/:stationID', async (req: Request, res: Response): Promise<void> => {\r\n      const station = req.params['stationID'];\r\n\r\n      if (!this.rdk || !this.rdk.stations?.has(station)) {\r\n        const msg = !this.rdk\r\n          ? 'JP_Radio::Radiko instance not initialized'\r\n          : `JP_Radio::${station} not in available stations`;\r\n        this.logger.error(msg);\r\n        res.status(500).send(msg);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const icyMetadata = new IcyMetadata();\r\n        const ffmpeg = await this.rdk.play(station);\r\n\r\n        if (!ffmpeg || !ffmpeg.stdout) {\r\n          this.logger.error('JP_Radio::ffmpeg start failed or stdout is null');\r\n          res.status(500).send('Stream start error');\r\n          return;\r\n        }\r\n\r\n        let ffmpegExited = false;\r\n        ffmpeg.on('exit', () => {\r\n          ffmpegExited = true;\r\n          this.logger.debug(`ffmpeg process ${ffmpeg.pid} exited.`);\r\n        });\r\n\r\n        const progData = await this.prg?.getCurProgram(station);\r\n        if (progData) {\r\n          const title = `${progData.pfm || ''} - ${progData.title || ''}`;\r\n          icyMetadata.setStreamTitle(title);\r\n        }\r\n\r\n        res.set({\r\n          'Cache-Control': 'no-cache, no-store',\r\n          'icy-name': await this.rdk.getStationAsciiName(station),\r\n          'icy-metaint': icyMetadata.metaInt,\r\n          'Content-Type': 'audio/aac',\r\n          Connection: 'keep-alive'\r\n        });\r\n\r\n        ffmpeg.stdout.pipe(icyMetadata).pipe(res);\r\n\r\n        res.on('close', () => {\r\n          if (ffmpeg.pid && !ffmpegExited) {\r\n            try {\r\n              process.kill(-ffmpeg.pid, 'SIGTERM');\r\n              this.logger.info(`SIGTERM sent to ffmpeg group ${ffmpeg.pid}`);\r\n            } catch (e: any) {\r\n              this.logger.warn(`Kill ffmpeg failed: ${e.code === 'ESRCH' ? 'Already exited' : e.message}`);\r\n            }\r\n          }\r\n        });\r\n\r\n        this.logger.info('JP_Radio::Streaming started');\r\n      } catch (err) {\r\n        this.logger.error('JP_Radio::Stream error', err);\r\n        res.status(500).send('Internal server error');\r\n      }\r\n    });\r\n\r\n    this.app.get('/radiko/', (_req, res) => {\r\n      res.send(\"Hello, world. You're at the radiko_app index.\");\r\n    });\r\n  }\r\n\r\n  async radioStations(): Promise<any[]> {\r\n    if (!this.rdk?.stations) return [];\r\n\r\n    const results = await Promise.all(\r\n      Array.from(this.rdk.stations.entries()).map(async ([stationId, stationInfo]) => {\r\n        const progData = await this.prg?.getCurProgram(stationId);\r\n        const progTitle = progData ? ` - ${progData.pfm || ''} - ${progData.title || ''}` : '';\r\n        const title = `${capitalize(stationInfo.AreaName)} / ${stationInfo.Name}${progTitle}`;\r\n\r\n        return {\r\n          service: 'webradio',\r\n          type: 'song',\r\n          title,\r\n          albumart: stationInfo.BannerURL,\r\n          uri: `http://localhost:${this.port}/radiko/${stationId}`,\r\n          name: '',\r\n          samplerate: '',\r\n          bitdepth: 0,\r\n          channels: 0\r\n        };\r\n      })\r\n    );\r\n\r\n    return results;\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    if (this.server) {\r\n      this.logger.info('JP_Radio::Already started');\r\n      this.commandRouter.pushToastMessage('info', 'JP Radio', 'すでに起動しています');\r\n      return;\r\n    }\r\n\r\n    this.prg = new RdkProg(this.logger);\r\n    this.rdk = new Radiko(this.port, this.logger, this.acct);\r\n    await this.#init();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.server = this.app\r\n        .listen(this.port, () => {\r\n          this.logger.info(`JP_Radio::Listening on port ${this.port}`);\r\n          this.commandRouter.pushToastMessage('success', 'JP Radio', '起動しました');\r\n          this.commandRouter.servicePushState({\r\n            status: 'play',\r\n            service: 'jp_radio',\r\n            title: 'Radiko 起動中',\r\n            uri: ''\r\n          });\r\n          this.task.start();\r\n          resolve();\r\n        })\r\n        .on('error', (err: any) => {\r\n          this.logger.error('JP_Radio::App error:', err);\r\n          this.commandRouter.pushToastMessage('error', 'JP Radio 起動失敗', err.message || 'エラー');\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    if (this.server) {\r\n      this.task.stop();\r\n      this.server.close();\r\n      this.server = null;\r\n\r\n      await this.prg?.dbClose();\r\n      this.prg = null;\r\n      this.rdk = null;\r\n\r\n      this.commandRouter.pushToastMessage('info', 'JP Radio', '停止しました');\r\n    }\r\n  }\r\n\r\n  async #init(): Promise<void> {\r\n    if (this.rdk) await this.rdk.init(this.acct);\r\n    await this.#pgupdate();\r\n  }\r\n\r\n  async #pgupdate(): Promise<void> {\r\n    this.logger.info('JP_Radio::Updating program listings');\r\n    await this.prg?.updatePrograms();\r\n    await this.prg?.clearOldProgram();\r\n  }\r\n}\r\n"]}