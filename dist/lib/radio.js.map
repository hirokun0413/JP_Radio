{"version":3,"file":"radio.js","sourceRoot":"","sources":["../../src/lib/radio.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Application, Request, Response } from 'express';\r\nimport RdkProg from './prog';\r\nimport Radiko from './radiko';\r\nimport cron from 'node-cron';\r\nimport IcyMetadata from 'icy-metadata';\r\nimport { capitalize } from 'lodash';\r\n\r\nexport default class JpRadio {\r\n  private task: ReturnType<typeof cron.schedule>;\r\n  private app: Application;\r\n  private server: any = null;\r\n  private port: number;\r\n  private logger: Console;\r\n  private acct: any;\r\n  private prg: RdkProg | null = null;\r\n  private rdk: Radiko | null = null;\r\n\r\n  constructor(port: number = 9000, logger: Console, acct: any = null) {\r\n    this.app = express();\r\n    this.port = port;\r\n    this.logger = logger;\r\n    this.acct = acct;\r\n\r\n    this.task = cron.schedule(\r\n      '0 3,9,15 * * *',\r\n      async () => {\r\n        try {\r\n          await this.#pgupdate();\r\n        } catch (e) {\r\n          this.logger.error('JP_Radio::cron task failed', e);\r\n        }\r\n      },\r\n      { scheduled: false }\r\n    );\r\n\r\n    this.#setupRoutes();\r\n  }\r\n\r\n  #setupRoutes() {\r\n    this.app.get('/radiko/:stationID', async (req: Request, res: Response) => {\r\n      try {\r\n        if (!this.rdk) {\r\n          this.logger.error('JP_Radio::Radiko instance not initialized');\r\n          res.status(500).send('Server error');\r\n          return;\r\n        }\r\n\r\n        const station = req.params['stationID'];\r\n        if (!this.rdk.stations?.has(station)) {\r\n          const msg = `JP_Radio::${station} not in available stations`;\r\n          this.logger.error(msg);\r\n          res.status(404).send(msg);\r\n          return;\r\n        }\r\n\r\n        const icyMetadata = new IcyMetadata();\r\n        const ffmpeg = await this.rdk.play(station);\r\n        if (!ffmpeg) {\r\n          res.status(500).send('Failed to start stream');\r\n          return;\r\n        }\r\n\r\n        // プロセス終了監視用フラグ\r\n        let ffmpegExited = false;\r\n        ffmpeg.on('exit', () => {\r\n          ffmpegExited = true;\r\n          this.logger.debug(`ffmpeg process ${ffmpeg.pid} exited.`);\r\n        });\r\n\r\n        res.setHeader('Cache-Control', 'no-cache, no-store');\r\n        res.setHeader('icy-name', await this.rdk.getStationAsciiName(station));\r\n        res.setHeader('icy-metaint', icyMetadata.metaInt);\r\n        res.setHeader('Content-Type', 'audio/aac');\r\n        res.setHeader('Connection', 'keep-alive');\r\n\r\n        const progData = await this.prg?.getCurProgram(station);\r\n        const title = progData ? `${progData.pfm || ''} - ${progData.title || ''}` : null;\r\n        if (title) icyMetadata.setStreamTitle(title);\r\n\r\n        if (ffmpeg.stdout) {\r\n          this.logger.info('JP_Radio::ffmpeg stdout');\r\n          ffmpeg.stdout.pipe(icyMetadata).pipe(res);\r\n        } else {\r\n          this.logger.error('JP_Radio::ffmpeg stdout is null');\r\n          res.status(500).send('Internal server error');\r\n          return;\r\n        }\r\n\r\n        res.on('close', () => {\r\n          if (ffmpeg.pid && !ffmpegExited) {\r\n            try {\r\n              // プロセスグループをSIGTERMでkill\r\n              process.kill(-ffmpeg.pid, 'SIGTERM');\r\n              this.logger.info(`Sent SIGTERM to ffmpeg process group ${ffmpeg.pid}`);\r\n            } catch (e: any) {\r\n              if (e.code === 'ESRCH') {\r\n                // プロセスは既に終了しているので問題なし\r\n                this.logger.info(`ffmpeg process ${ffmpeg.pid} already exited.`);\r\n              } else {\r\n                this.logger.warn(`Failed to kill ffmpeg process ${ffmpeg.pid}`, e);\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        this.logger.info('JP_Radio::get returning response');\r\n      } catch (err) {\r\n        this.logger.error('JP_Radio::error in /radiko/:stationID handler', err);\r\n        res.status(500).send('Internal server error');\r\n      }\r\n    });\r\n\r\n    this.app.get('/radiko/', (req: Request, res: Response) => {\r\n      res.send(\"Hello, world. You're at the radiko_app index.\");\r\n    });\r\n  }\r\n\r\n  radioStations(): any[] {\r\n    if (!this.rdk?.stations) {\r\n      return [];\r\n    }\r\n\r\n    const radikoPlayLists = [];\r\n\r\n    for (const [stationId, stationInfo] of this.rdk.stations.entries()) {\r\n      const title = `${capitalize(stationInfo.AreaName)} / ${stationInfo.Name}`;\r\n\r\n      radikoPlayLists.push({\r\n        service: 'webradio',\r\n        type: 'song',\r\n        title: title,\r\n        albumart: stationInfo.BannerURL,\r\n        uri: `http://localhost:${this.port}/radiko/${stationId}`,\r\n        name: '',\r\n        samplerate: '',\r\n        bitdepth: 0,\r\n        channels: 0\r\n      });\r\n    }\r\n\r\n    return radikoPlayLists;\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    if (this.server) {\r\n      this.logger.info('JP_Radio::App already started');\r\n      return;\r\n    }\r\n\r\n    this.prg = new RdkProg(this.logger);\r\n    this.rdk = new Radiko(this.port, this.logger, this.acct);\r\n    await this.#init();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.server = this.app\r\n        .listen(this.port, () => {\r\n          this.logger.info(`JP_Radio::App is listening on port ${this.port}.`);\r\n          this.task.start();\r\n          resolve();\r\n        })\r\n        .on('error', (err: any) => {\r\n          this.logger.error('JP_Radio::App error:', err);\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    if (this.server) {\r\n      this.task.stop();\r\n      this.server.close();\r\n      this.server = null;\r\n\r\n      await this.prg?.dbClose();\r\n      this.prg = null;\r\n      this.rdk = null;\r\n    }\r\n  }\r\n\r\n  async #init(): Promise<void> {\r\n    if (this.rdk) await this.rdk.init(this.acct);\r\n    await this.#pgupdate();\r\n  }\r\n\r\n  async #pgupdate(): Promise<void> {\r\n    this.logger.info('JP_Radio::Updating program listings');\r\n    await this.prg?.updatePrograms();\r\n    await this.prg?.clearOldProgram();\r\n  }\r\n}\r\n"]}