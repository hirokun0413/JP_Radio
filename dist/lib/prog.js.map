{"version":3,"file":"prog.js","sourceRoot":"","sources":["../../src/lib/prog.ts"],"names":[],"mappings":"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","sourcesContent":["import { format } from 'date-fns';\r\nimport got from 'got';\r\nimport Datastore from 'nedb-promises';\r\nimport { XMLParser } from 'fast-xml-parser';\r\nimport { format as utilFormat } from 'util';\r\n\r\nimport { PROG_URL } from './consts/radikoUrls';\r\nimport type { RadikoProgramData } from './models/RadikoProgramData';\r\nimport type { RadikoXMLData } from './models/RadikoXMLStation';\r\n\r\nexport default class RdkProg {\r\n  private logger: Console;\r\n  private db = Datastore.create({ inMemoryOnly: true });\r\n  private station: string | null = null;\r\n  private lastdt: string | null = null;\r\n  private radikoProgData: RadikoProgramData | null = null;\r\n\r\n  constructor(logger: Console) {\r\n    this.logger = logger;\r\n    this.#initDBIndexes();\r\n  }\r\n\r\n  #initDBIndexes() {\r\n    this.db.ensureIndex({ fieldName: 'id', unique: true });\r\n    this.db.ensureIndex({ fieldName: 'station' });\r\n    this.db.ensureIndex({ fieldName: 'ft' });\r\n    this.db.ensureIndex({ fieldName: 'tt' });\r\n  }\r\n\r\n  async getCurProgram(station: string): Promise<RadikoProgramData | null> {\r\n    const curdt = this.#getCurrentTime();\r\n\r\n    if (station !== this.station || curdt !== this.lastdt) {\r\n      try {\r\n        const results = await this.db.find({\r\n          station,\r\n          ft: { $lte: curdt },\r\n          tt: { $gte: curdt }\r\n        });\r\n\r\n        const first = results[0];\r\n        this.radikoProgData = isRadikoProgramData(first) ? first : null;\r\n      } catch (error) {\r\n        this.logger.error(`JP_Radio::DB Find Error for station ${station}`, error);\r\n      }\r\n\r\n      this.station = station;\r\n      this.lastdt = curdt;\r\n    }\r\n\r\n    return this.radikoProgData;\r\n  }\r\n\r\n  async putProgram(prog: RadikoProgramData): Promise<void> {\r\n    try {\r\n      await this.db.insert(prog);\r\n    } catch (error: any) {\r\n      if (error?.errorType !== 'uniqueViolated') {\r\n        this.logger.error('JP_Radio::DB Insert Error', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  async clearOldProgram(): Promise<void> {\r\n    const curdt = this.#getCurrentTime();\r\n    try {\r\n      await this.db.remove({ tt: { $lt: curdt } }, { multi: true });\r\n    } catch (error) {\r\n      this.logger.error('JP_Radio::DB Delete Error', error);\r\n    }\r\n  }\r\n\r\n  async updatePrograms(): Promise<void> {\r\n    const curDate = this.#getCurrentDate();\r\n    const xmlParser = new XMLParser({\r\n      attributeNamePrefix: '@',\r\n      ignoreAttributes: false,\r\n      allowBooleanAttributes: true\r\n    });\r\n\r\n    for (let i = 1; i <= 47; i++) {\r\n      const areaID = `JP${i}`;\r\n      const url = utilFormat(PROG_URL, curDate, areaID);\r\n\r\n      try {\r\n        const response = await got(url);\r\n        const data: RadikoXMLData = xmlParser.parse(response.body);\r\n\r\n        for (const stationData of data.radiko.stations.station) {\r\n          const stationName = stationData['@id'];\r\n          if (stationName === 'MAJAL') continue;\r\n\r\n          for (const prog of stationData.progs.prog) {\r\n            await this.putProgram({\r\n              station: stationName,\r\n              id: stationName + prog['@id'],\r\n              ft: prog['@ft'],\r\n              tt: prog['@to'],\r\n              title: prog['title'],\r\n              pfm: prog['pfm'] || ''\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        this.logger.error(`JP_Radio::Failed to update program for ${areaID}`, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  async dbClose(): Promise<void> {\r\n    this.logger.info('JP_Radio::DB Compacting');\r\n    await this.db.persistence.compactDatafile();\r\n  }\r\n\r\n  async allData(): Promise<string> {\r\n    const data = await this.db.find({});\r\n    return JSON.stringify(data, null, 2);\r\n  }\r\n\r\n  /**\r\n   * \"yyyyMMddHHmm\" 形式の現在時刻文字列を返す\r\n   */\r\n  #getCurrentTime(): string {\r\n    return format(new Date(), 'yyyyMMddHHmm');\r\n  }\r\n\r\n  /**\r\n   * \"yyyyMMdd\" 形式の現在日付文字列を返す\r\n   */\r\n  #getCurrentDate(): string {\r\n    return format(new Date(), 'yyyyMMdd');\r\n  }\r\n}\r\n\r\n/**\r\n * 型チェックユーティリティ\r\n */\r\nfunction isRadikoProgramData(data: any): data is RadikoProgramData {\r\n  return (\r\n    typeof data?.station === 'string' &&\r\n    typeof data?.id === 'string' &&\r\n    typeof data?.ft === 'string' &&\r\n    typeof data?.tt === 'string' &&\r\n    typeof data?.title === 'string' &&\r\n    typeof data?.pfm === 'string'\r\n  );\r\n}\r\n"]}